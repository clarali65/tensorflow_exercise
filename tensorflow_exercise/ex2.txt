%matplotlib inline

import matplotlib as plt
import numpy as np
import tensorflow as tf

np.random.seed(5)
x_data = np.linspace(0,100,500)
y_data = 3.1234 * x_data + 2.98 + np.random.randn(500) * 0.4
plt.scatter(x_data,y_data)
plt.plot(x_data,3.1234 * x_data + 2.98,color = 'red',linewidth = 3)
x = tf.placeholder("float",name = "x")
y = tf.placeholder("float",name = "y")

def model(x,w,b):
    y = tf.multiply(x,w)+ b
    return y

w = tf.Variable(1.0,name = "w0")
b = tf.Variable(0.0,name = "b0")

pred = model(x,w,b)

train_epoch = 10
learning_rate = 0.05
loss_function = tf.reduce_mean(tf.square(y-pred))

optimizer = tf.train.GradientDescentOptimizer(learning_rate).minimize(loss_function)

sess = tf.Session()
init = tf.global_variables_initializer()
sess.run(init)

display_step = 20
loss_list = []
step = 0

for epoch in range(train_epoch):
    for xs,ys in zip(x_data,y_data):
        _, loss = sess.run([optimizer,loss_function],feed_dict{x:xs,y:ys})
        loss_list.append(loss)
        step = step + 1
        if step % display_step == 0:
            print("Train Epoch:",'%02d' % (epoch + 1),"Step:",'%03d' % (step),"loss=",'{:.9f}'.format(loss))
    b0temp = b.eval(session=sess)
    w0temp = w.eval(session=sess)

x_test = 5.79
predict = sess.run(pred,feed_dict = {x:x_test})
print("预测值：" % predict)
target = 3.1234 * x_test + 2.98
print("目标值：" % target)